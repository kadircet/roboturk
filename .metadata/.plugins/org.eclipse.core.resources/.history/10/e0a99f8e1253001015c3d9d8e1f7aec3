/*
 * SSLSimVisualizer.cpp
 *
 *  Created on: Mar 17, 2011
 *      Author: kadir
 */

#include "SSLSimVisualizer.h"
#include "iostream"

void SSLSimVisualizer::callback(const ssl_msgs::Visualization::ConstPtr &viz_msg){
  if(!first_viz_data_arrived)
    first_viz_data_arrived = true;
  viz = *viz_msg;
  std::cout<<"visualizer: rcvd data"<<std::endl;
  ShowForceVector();
}

void SSLSimVisualizer::ShowForceVector(){

  if(first_viz_data_arrived)//being extra-cautious
  {
    //first robot pose in ssl_vision frame
    //then the force vector in deltaX, deltaY and deltaZ format
    //w.r.t the robots 2D location but oriented w.r.t. global frame
    float* tmp= new float[6];
    tmp[0]=viz.robot_position.x;
    tmp[1]=viz.robot_position.y;
    tmp[2]=viz.robot_position.z;
    tmp[3]=viz.force_vector.x;
    tmp[4]=viz.force_vector.y;
    tmp[5]=viz.force_vector.z;
//    std::cout<<"sending visualization data"<<std::endl;
//    std::cout <<tmp[0]<<"\t"
//              <<tmp[1]<<"\t"
//              <<tmp[2]<<"\t"
//              <<tmp[3]<<"\t"
//              <<tmp[4]<<"\t"
//              <<tmp[5]<<std::endl;
    emitter->send(tmp,6*sizeof(float));
    delete[] tmp;
  }
}

void SSLSimVisualizer::Spin(){
//  first_viz_data_arrived = true;

  while(!first_viz_data_arrived && nh.ok()){
    ros::spinOnce();
    if (step(TIME_STEP) == -1) break;
  }
  int cnt=0;
  //ros::Rate loop_rate(10);

  while(nh.ok()/* && cnt<4*/){
//    switch (cnt) {
//      case 0:
//        viz.robot_position.x = 0;//z
//        viz.robot_position.y = 0;//x
//        viz.robot_position.z = 0;
//        viz.force_vector.x = 0;
//        viz.force_vector.y = 0;
//        viz.force_vector.z = 0.2;
//        break;
//      case 1:
//        viz.robot_position.x = 0.1;
//        viz.robot_position.y = 0;
//        viz.robot_position.z = 0.1;
//        viz.force_vector.x = 0.2;
//        viz.force_vector.y = 0;
//        viz.force_vector.z = 0;
//        break;
//      case 2:
//        viz.robot_position.x = -0.2;
//        viz.robot_position.y =  0;
//        viz.robot_position.z =  0.2;
//        viz.force_vector.x = 0;
//        viz.force_vector.y = 0;
//        viz.force_vector.z = -0.2;
//        break;
//      case 3:
//        viz.robot_position.x = -0.2;
//        viz.robot_position.y =  0;
//        viz.robot_position.z =  0.3;
//        viz.force_vector.x = -0.2;
//        viz.force_vector.y = 0;
//        viz.force_vector.z = 0;
//        break;
//      default:
//        break;
//    }
//    cnt++;
    ros::spinOnce();
    //loop_rate.sleep();
    if (step(TIME_STEP) == -1) break;
  }
}

SSLSimVisualizer::SSLSimVisualizer(const ros::NodeHandle& n):nh(n)
{
  emitter = getEmitter("emitter");
  sub =
      nh.subscribe("visualization",1000,&SSLSimVisualizer::callback,this);
}

SSLSimVisualizer::~SSLSimVisualizer()
{
  // TODO Auto-generated destructor stub
}
