"""autogenerated by genmsg_py from GlobalState.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import ssl_msgs.msg
import std_msgs.msg

class GlobalState(roslib.message.Message):
  _md5sum = "ff5ed60cc23474d8e2b4dd790d960277"
  _type = "ssl_msgs/GlobalState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
ssl_msgs/GlobalRobotState[] robots_blue
ssl_msgs/GlobalRobotState[] robots_yellow
ssl_msgs/BallState[] balls

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ssl_msgs/GlobalRobotState
float32 confidence 		#confidence of the identification of the robot
uint8 id 			#robot id
uint8 team 			#robot's team 0->Blue 1->Yellow (this might be changed later on)
uint8 state 			#0->out of game/no detection, 1->in game, 2->in game but no move
geometry_msgs/Pose2D pose 	#robot's pose x,y,theta
geometry_msgs/Pose2D pix_coord 	#robot's 2D position in the image plane
float32 height 			#robot's actual height

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
================================================================================
MSG: ssl_msgs/BallState
float32 confidence
float32 area
geometry_msgs/Point32 position
geometry_msgs/Point32 pix_coord

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['header','robots_blue','robots_yellow','balls']
  _slot_types = ['Header','ssl_msgs/GlobalRobotState[]','ssl_msgs/GlobalRobotState[]','ssl_msgs/BallState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,robots_blue,robots_yellow,balls
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GlobalState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.robots_blue is None:
        self.robots_blue = []
      if self.robots_yellow is None:
        self.robots_yellow = []
      if self.balls is None:
        self.balls = []
    else:
      self.header = std_msgs.msg._Header.Header()
      self.robots_blue = []
      self.robots_yellow = []
      self.balls = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.robots_blue)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_blue:
        _x = val1
        buff.write(_struct_f3B.pack(_x.confidence, _x.id, _x.team, _x.state))
        _v1 = val1.pose
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v2 = val1.pix_coord
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        buff.write(_struct_f.pack(val1.height))
      length = len(self.robots_yellow)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_yellow:
        _x = val1
        buff.write(_struct_f3B.pack(_x.confidence, _x.id, _x.team, _x.state))
        _v3 = val1.pose
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v4 = val1.pix_coord
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        buff.write(_struct_f.pack(val1.height))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_2f.pack(_x.confidence, _x.area))
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v6 = val1.pix_coord
        _x = _v6
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_blue = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.GlobalRobotState()
        _x = val1
        start = end
        end += 7
        (_x.confidence, _x.id, _x.team, _x.state,) = _struct_f3B.unpack(str[start:end])
        _v7 = val1.pose
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.pix_coord
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.height,) = _struct_f.unpack(str[start:end])
        self.robots_blue.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_yellow = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.GlobalRobotState()
        _x = val1
        start = end
        end += 7
        (_x.confidence, _x.id, _x.team, _x.state,) = _struct_f3B.unpack(str[start:end])
        _v9 = val1.pose
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v10 = val1.pix_coord
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.height,) = _struct_f.unpack(str[start:end])
        self.robots_yellow.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.BallState()
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.area,) = _struct_2f.unpack(str[start:end])
        _v11 = val1.position
        _x = _v11
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v12 = val1.pix_coord
        _x = _v12
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.balls.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.robots_blue)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_blue:
        _x = val1
        buff.write(_struct_f3B.pack(_x.confidence, _x.id, _x.team, _x.state))
        _v13 = val1.pose
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v14 = val1.pix_coord
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        buff.write(_struct_f.pack(val1.height))
      length = len(self.robots_yellow)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_yellow:
        _x = val1
        buff.write(_struct_f3B.pack(_x.confidence, _x.id, _x.team, _x.state))
        _v15 = val1.pose
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v16 = val1.pix_coord
        _x = _v16
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        buff.write(_struct_f.pack(val1.height))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_2f.pack(_x.confidence, _x.area))
        _v17 = val1.position
        _x = _v17
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v18 = val1.pix_coord
        _x = _v18
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_blue = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.GlobalRobotState()
        _x = val1
        start = end
        end += 7
        (_x.confidence, _x.id, _x.team, _x.state,) = _struct_f3B.unpack(str[start:end])
        _v19 = val1.pose
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v20 = val1.pix_coord
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.height,) = _struct_f.unpack(str[start:end])
        self.robots_blue.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_yellow = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.GlobalRobotState()
        _x = val1
        start = end
        end += 7
        (_x.confidence, _x.id, _x.team, _x.state,) = _struct_f3B.unpack(str[start:end])
        _v21 = val1.pose
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v22 = val1.pix_coord
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.height,) = _struct_f.unpack(str[start:end])
        self.robots_yellow.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.BallState()
        _x = val1
        start = end
        end += 8
        (_x.confidence, _x.area,) = _struct_2f.unpack(str[start:end])
        _v23 = val1.position
        _x = _v23
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v24 = val1.pix_coord
        _x = _v24
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.balls.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f3B = struct.Struct("<f3B")
_struct_f = struct.Struct("<f")
_struct_2f = struct.Struct("<2f")
_struct_3I = struct.Struct("<3I")
_struct_3f = struct.Struct("<3f")
_struct_3d = struct.Struct("<3d")
