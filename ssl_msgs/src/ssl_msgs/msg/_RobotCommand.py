"""autogenerated by genmsg_py from RobotCommand.msg. Do not edit."""
import roslib.message
import struct


class RobotCommand(roslib.message.Message):
  _md5sum = "f28766d065dcde0dfeee5898a91f2085"
  _type = "ssl_msgs/RobotCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame
float32 trans_direction	# in radians w.r.t local frame
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame
bool rot_direction	# ccw:+, cw:- w.r.t local frame
float32 dribbler_speed	# always positive, indicates magnitude in rpm
bool dribbler_direction	# ccw:+, cw:-
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	
bool return_battery	# true if battery level info is requested. false otherwise
bool return_temp_1	# true if temp_1 level info is requested. false otherwise
bool return_temp_2	# true if temp_2 level info is requested. false otherwise
bool return_temp_3	# true if temp_3 level info is requested. false otherwise


"""
  __slots__ = ['trans_speed','trans_direction','rot_speed','rot_direction','dribbler_speed','dribbler_direction','kicker_speed','return_battery','return_temp_1','return_temp_2','return_temp_3']
  _slot_types = ['float32','float32','float32','bool','float32','bool','uint8','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       trans_speed,trans_direction,rot_speed,rot_direction,dribbler_speed,dribbler_direction,kicker_speed,return_battery,return_temp_1,return_temp_2,return_temp_3
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(RobotCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trans_speed is None:
        self.trans_speed = 0.
      if self.trans_direction is None:
        self.trans_direction = 0.
      if self.rot_speed is None:
        self.rot_speed = 0.
      if self.rot_direction is None:
        self.rot_direction = False
      if self.dribbler_speed is None:
        self.dribbler_speed = 0.
      if self.dribbler_direction is None:
        self.dribbler_direction = False
      if self.kicker_speed is None:
        self.kicker_speed = 0
      if self.return_battery is None:
        self.return_battery = False
      if self.return_temp_1 is None:
        self.return_temp_1 = False
      if self.return_temp_2 is None:
        self.return_temp_2 = False
      if self.return_temp_3 is None:
        self.return_temp_3 = False
    else:
      self.trans_speed = 0.
      self.trans_direction = 0.
      self.rot_speed = 0.
      self.rot_direction = False
      self.dribbler_speed = 0.
      self.dribbler_direction = False
      self.kicker_speed = 0
      self.return_battery = False
      self.return_temp_1 = False
      self.return_temp_2 = False
      self.return_temp_3 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3fBf6B.pack(_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3,) = _struct_3fBf6B.unpack(str[start:end])
      self.rot_direction = bool(self.rot_direction)
      self.dribbler_direction = bool(self.dribbler_direction)
      self.return_battery = bool(self.return_battery)
      self.return_temp_1 = bool(self.return_temp_1)
      self.return_temp_2 = bool(self.return_temp_2)
      self.return_temp_3 = bool(self.return_temp_3)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3fBf6B.pack(_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3,) = _struct_3fBf6B.unpack(str[start:end])
      self.rot_direction = bool(self.rot_direction)
      self.dribbler_direction = bool(self.dribbler_direction)
      self.return_battery = bool(self.return_battery)
      self.return_temp_1 = bool(self.return_temp_1)
      self.return_temp_2 = bool(self.return_temp_2)
      self.return_temp_3 = bool(self.return_temp_3)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3fBf6B = struct.Struct("<3fBf6B")
