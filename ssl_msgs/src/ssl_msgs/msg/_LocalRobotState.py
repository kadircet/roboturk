"""autogenerated by genmsg_py from LocalRobotState.msg. Do not edit."""
import roslib.message
import struct


class LocalRobotState(roslib.message.Message):
  _md5sum = "91ec796323133e006b0a572e6a364407"
  _type = "ssl_msgs/LocalRobotState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool ball_possesion 	#true if it possess, false otherwise
uint8 battery		#battery level of the robot changes between [0-100]
float32 temp1 		#dummy
float32 temp2 		#dummy
float32 temp3 		#dummy

"""
  __slots__ = ['ball_possesion','battery','temp1','temp2','temp3']
  _slot_types = ['bool','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       ball_possesion,battery,temp1,temp2,temp3
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LocalRobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ball_possesion is None:
        self.ball_possesion = False
      if self.battery is None:
        self.battery = 0
      if self.temp1 is None:
        self.temp1 = 0.
      if self.temp2 is None:
        self.temp2 = 0.
      if self.temp3 is None:
        self.temp3 = 0.
    else:
      self.ball_possesion = False
      self.battery = 0
      self.temp1 = 0.
      self.temp2 = 0.
      self.temp3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2B3f.pack(_x.ball_possesion, _x.battery, _x.temp1, _x.temp2, _x.temp3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.ball_possesion, _x.battery, _x.temp1, _x.temp2, _x.temp3,) = _struct_2B3f.unpack(str[start:end])
      self.ball_possesion = bool(self.ball_possesion)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2B3f.pack(_x.ball_possesion, _x.battery, _x.temp1, _x.temp2, _x.temp3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.ball_possesion, _x.battery, _x.temp1, _x.temp2, _x.temp3,) = _struct_2B3f.unpack(str[start:end])
      self.ball_possesion = bool(self.ball_possesion)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2B3f = struct.Struct("<2B3f")
