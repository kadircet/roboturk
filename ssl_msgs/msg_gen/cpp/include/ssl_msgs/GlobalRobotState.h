/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/robocup/system_design/robocup_ssl/ssl_msgs/msg/GlobalRobotState.msg */
#ifndef SSL_MSGS_MESSAGE_GLOBALROBOTSTATE_H
#define SSL_MSGS_MESSAGE_GLOBALROBOTSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Pose2D.h"
#include "geometry_msgs/Pose2D.h"

namespace ssl_msgs
{
template <class ContainerAllocator>
struct GlobalRobotState_ : public ros::Message
{
  typedef GlobalRobotState_<ContainerAllocator> Type;

  GlobalRobotState_()
  : confidence(0.0)
  , id(0)
  , team(0)
  , state(0)
  , pose()
  , pix_coord()
  , height(0.0)
  {
  }

  GlobalRobotState_(const ContainerAllocator& _alloc)
  : confidence(0.0)
  , id(0)
  , team(0)
  , state(0)
  , pose(_alloc)
  , pix_coord(_alloc)
  , height(0.0)
  {
  }

  typedef float _confidence_type;
  float confidence;

  typedef uint8_t _id_type;
  uint8_t id;

  typedef uint8_t _team_type;
  uint8_t team;

  typedef uint8_t _state_type;
  uint8_t state;

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pix_coord_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pix_coord;

  typedef float _height_type;
  float height;


private:
  static const char* __s_getDataType_() { return "ssl_msgs/GlobalRobotState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "030e1e0e060477ba33c8d00d7d1359dd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 confidence 		#confidence of the identification of the robot\n\
uint8 id 			#robot id\n\
uint8 team 			#robot's team 0->Blue 1->Yellow (this might be changed later on)\n\
uint8 state 			#0->out of game/no detection, 1->in game, 2->in game but no move\n\
geometry_msgs/Pose2D pose 	#robot's pose x,y,theta\n\
geometry_msgs/Pose2D pix_coord 	#robot's 2D position in the image plane\n\
float32 height 			#robot's actual height\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, confidence);
    ros::serialization::serialize(stream, id);
    ros::serialization::serialize(stream, team);
    ros::serialization::serialize(stream, state);
    ros::serialization::serialize(stream, pose);
    ros::serialization::serialize(stream, pix_coord);
    ros::serialization::serialize(stream, height);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, confidence);
    ros::serialization::deserialize(stream, id);
    ros::serialization::deserialize(stream, team);
    ros::serialization::deserialize(stream, state);
    ros::serialization::deserialize(stream, pose);
    ros::serialization::deserialize(stream, pix_coord);
    ros::serialization::deserialize(stream, height);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(confidence);
    size += ros::serialization::serializationLength(id);
    size += ros::serialization::serializationLength(team);
    size += ros::serialization::serializationLength(state);
    size += ros::serialization::serializationLength(pose);
    size += ros::serialization::serializationLength(pix_coord);
    size += ros::serialization::serializationLength(height);
    return size;
  }

  typedef boost::shared_ptr< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::GlobalRobotState_<ContainerAllocator>  const> ConstPtr;
}; // struct GlobalRobotState
typedef  ::ssl_msgs::GlobalRobotState_<std::allocator<void> > GlobalRobotState;

typedef boost::shared_ptr< ::ssl_msgs::GlobalRobotState> GlobalRobotStatePtr;
typedef boost::shared_ptr< ::ssl_msgs::GlobalRobotState const> GlobalRobotStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssl_msgs::GlobalRobotState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "030e1e0e060477ba33c8d00d7d1359dd";
  }

  static const char* value(const  ::ssl_msgs::GlobalRobotState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x030e1e0e060477baULL;
  static const uint64_t static_value2 = 0x33c8d00d7d1359ddULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/GlobalRobotState";
  }

  static const char* value(const  ::ssl_msgs::GlobalRobotState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 confidence 		#confidence of the identification of the robot\n\
uint8 id 			#robot id\n\
uint8 team 			#robot's team 0->Blue 1->Yellow (this might be changed later on)\n\
uint8 state 			#0->out of game/no detection, 1->in game, 2->in game but no move\n\
geometry_msgs/Pose2D pose 	#robot's pose x,y,theta\n\
geometry_msgs/Pose2D pix_coord 	#robot's 2D position in the image plane\n\
float32 height 			#robot's actual height\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::ssl_msgs::GlobalRobotState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.confidence);
    stream.next(m.id);
    stream.next(m.team);
    stream.next(m.state);
    stream.next(m.pose);
    stream.next(m.pix_coord);
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GlobalRobotState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::GlobalRobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssl_msgs::GlobalRobotState_<ContainerAllocator> & v) 
  {
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "team: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.team);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "pix_coord: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pix_coord);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_GLOBALROBOTSTATE_H

