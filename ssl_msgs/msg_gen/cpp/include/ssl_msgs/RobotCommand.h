/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/robocup/system_design/robocup_ssl/ssl_msgs/msg/RobotCommand.msg */
#ifndef SSL_MSGS_MESSAGE_ROBOTCOMMAND_H
#define SSL_MSGS_MESSAGE_ROBOTCOMMAND_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace ssl_msgs
{
template <class ContainerAllocator>
struct RobotCommand_ : public ros::Message
{
  typedef RobotCommand_<ContainerAllocator> Type;

  RobotCommand_()
  : trans_speed(0.0)
  , trans_direction(0.0)
  , rot_speed(0.0)
  , rot_direction(false)
  , dribbler_speed(0.0)
  , dribbler_direction(false)
  , kicker_speed(0)
  , return_battery(false)
  , return_temp_1(false)
  , return_temp_2(false)
  , return_temp_3(false)
  {
  }

  RobotCommand_(const ContainerAllocator& _alloc)
  : trans_speed(0.0)
  , trans_direction(0.0)
  , rot_speed(0.0)
  , rot_direction(false)
  , dribbler_speed(0.0)
  , dribbler_direction(false)
  , kicker_speed(0)
  , return_battery(false)
  , return_temp_1(false)
  , return_temp_2(false)
  , return_temp_3(false)
  {
  }

  typedef float _trans_speed_type;
  float trans_speed;

  typedef float _trans_direction_type;
  float trans_direction;

  typedef float _rot_speed_type;
  float rot_speed;

  typedef uint8_t _rot_direction_type;
  uint8_t rot_direction;

  typedef float _dribbler_speed_type;
  float dribbler_speed;

  typedef uint8_t _dribbler_direction_type;
  uint8_t dribbler_direction;

  typedef uint8_t _kicker_speed_type;
  uint8_t kicker_speed;

  typedef uint8_t _return_battery_type;
  uint8_t return_battery;

  typedef uint8_t _return_temp_1_type;
  uint8_t return_temp_1;

  typedef uint8_t _return_temp_2_type;
  uint8_t return_temp_2;

  typedef uint8_t _return_temp_3_type;
  uint8_t return_temp_3;


private:
  static const char* __s_getDataType_() { return "ssl_msgs/RobotCommand"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f28766d065dcde0dfeee5898a91f2085"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame\n\
float32 trans_direction	# in radians w.r.t local frame\n\
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame\n\
bool rot_direction	# ccw:+, cw:- w.r.t local frame\n\
float32 dribbler_speed	# always positive, indicates magnitude in rpm\n\
bool dribbler_direction	# ccw:+, cw:-\n\
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	\n\
bool return_battery	# true if battery level info is requested. false otherwise\n\
bool return_temp_1	# true if temp_1 level info is requested. false otherwise\n\
bool return_temp_2	# true if temp_2 level info is requested. false otherwise\n\
bool return_temp_3	# true if temp_3 level info is requested. false otherwise\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, trans_speed);
    ros::serialization::serialize(stream, trans_direction);
    ros::serialization::serialize(stream, rot_speed);
    ros::serialization::serialize(stream, rot_direction);
    ros::serialization::serialize(stream, dribbler_speed);
    ros::serialization::serialize(stream, dribbler_direction);
    ros::serialization::serialize(stream, kicker_speed);
    ros::serialization::serialize(stream, return_battery);
    ros::serialization::serialize(stream, return_temp_1);
    ros::serialization::serialize(stream, return_temp_2);
    ros::serialization::serialize(stream, return_temp_3);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, trans_speed);
    ros::serialization::deserialize(stream, trans_direction);
    ros::serialization::deserialize(stream, rot_speed);
    ros::serialization::deserialize(stream, rot_direction);
    ros::serialization::deserialize(stream, dribbler_speed);
    ros::serialization::deserialize(stream, dribbler_direction);
    ros::serialization::deserialize(stream, kicker_speed);
    ros::serialization::deserialize(stream, return_battery);
    ros::serialization::deserialize(stream, return_temp_1);
    ros::serialization::deserialize(stream, return_temp_2);
    ros::serialization::deserialize(stream, return_temp_3);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(trans_speed);
    size += ros::serialization::serializationLength(trans_direction);
    size += ros::serialization::serializationLength(rot_speed);
    size += ros::serialization::serializationLength(rot_direction);
    size += ros::serialization::serializationLength(dribbler_speed);
    size += ros::serialization::serializationLength(dribbler_direction);
    size += ros::serialization::serializationLength(kicker_speed);
    size += ros::serialization::serializationLength(return_battery);
    size += ros::serialization::serializationLength(return_temp_1);
    size += ros::serialization::serializationLength(return_temp_2);
    size += ros::serialization::serializationLength(return_temp_3);
    return size;
  }

  typedef boost::shared_ptr< ::ssl_msgs::RobotCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::RobotCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct RobotCommand
typedef  ::ssl_msgs::RobotCommand_<std::allocator<void> > RobotCommand;

typedef boost::shared_ptr< ::ssl_msgs::RobotCommand> RobotCommandPtr;
typedef boost::shared_ptr< ::ssl_msgs::RobotCommand const> RobotCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssl_msgs::RobotCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::RobotCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f28766d065dcde0dfeee5898a91f2085";
  }

  static const char* value(const  ::ssl_msgs::RobotCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf28766d065dcde0dULL;
  static const uint64_t static_value2 = 0xfeee5898a91f2085ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::RobotCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/RobotCommand";
  }

  static const char* value(const  ::ssl_msgs::RobotCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::RobotCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame\n\
float32 trans_direction	# in radians w.r.t local frame\n\
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame\n\
bool rot_direction	# ccw:+, cw:- w.r.t local frame\n\
float32 dribbler_speed	# always positive, indicates magnitude in rpm\n\
bool dribbler_direction	# ccw:+, cw:-\n\
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	\n\
bool return_battery	# true if battery level info is requested. false otherwise\n\
bool return_temp_1	# true if temp_1 level info is requested. false otherwise\n\
bool return_temp_2	# true if temp_2 level info is requested. false otherwise\n\
bool return_temp_3	# true if temp_3 level info is requested. false otherwise\n\
\n\
\n\
";
  }

  static const char* value(const  ::ssl_msgs::RobotCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssl_msgs::RobotCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssl_msgs::RobotCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trans_speed);
    stream.next(m.trans_direction);
    stream.next(m.rot_speed);
    stream.next(m.rot_direction);
    stream.next(m.dribbler_speed);
    stream.next(m.dribbler_direction);
    stream.next(m.kicker_speed);
    stream.next(m.return_battery);
    stream.next(m.return_temp_1);
    stream.next(m.return_temp_2);
    stream.next(m.return_temp_3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::RobotCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssl_msgs::RobotCommand_<ContainerAllocator> & v) 
  {
    s << indent << "trans_speed: ";
    Printer<float>::stream(s, indent + "  ", v.trans_speed);
    s << indent << "trans_direction: ";
    Printer<float>::stream(s, indent + "  ", v.trans_direction);
    s << indent << "rot_speed: ";
    Printer<float>::stream(s, indent + "  ", v.rot_speed);
    s << indent << "rot_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rot_direction);
    s << indent << "dribbler_speed: ";
    Printer<float>::stream(s, indent + "  ", v.dribbler_speed);
    s << indent << "dribbler_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dribbler_direction);
    s << indent << "kicker_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.kicker_speed);
    s << indent << "return_battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_battery);
    s << indent << "return_temp_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_temp_1);
    s << indent << "return_temp_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_temp_2);
    s << indent << "return_temp_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_temp_3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_ROBOTCOMMAND_H

