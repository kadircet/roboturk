/*
 * File:          
 * Date:          
 * Description:   
 * Author:        
 * Modifications: 
 */

#include <ode/ode.h>
#include <plugins/physics.h>
#include "math.h"

#include "vector"
#include "iostream"

#define PI 3.14159265

struct Arrow{
	float main_line[2][3];
	float left_line[2][3];
	float right_line[2][3];
	float offset[3];
	float length;
	float angle;

	void draw(){
		glPushMatrix();
		glRotatef(angle*180.0/PI, 0, 1, 0);
		glTranslatef(offset[0],offset[1],offset[2]);

		glLineWidth(2);
		glBegin(GL_LINES);
		glColor3f(0.0, 0.0, 1.0);

		glVertex3f(	main_line[0][0],
				main_line[0][1],
				main_line[0][2]) ;
		glVertex3f(	main_line[1][0],
				main_line[1][1],
				main_line[1][2]) ;

		glVertex3f(	left_line[0][0],
				left_line[0][1],
				left_line[0][2]) ;
		glVertex3f(	left_line[1][0],
				left_line[1][1],
				left_line[1][2]) ;

		glVertex3f(	right_line[0][0],
				right_line[0][1],
				right_line[0][2]) ;
		glVertex3f(	right_line[1][0],
				right_line[1][1],
				right_line[1][2]) ;
		glEnd();
		glPopMatrix();
	}
	//supposed to be in webots coordinate system
	Arrow(float force_vector[3],float robot_pose[3]){
		offset[2]=robot_pose[0];//z
		offset[0]=robot_pose[1];//x
		offset[1]=0.0;//y

		//length of the force vector
		length= sqrt( 	pow(force_vector[0], 2.0)+
				pow(force_vector[1], 2.0)+
				pow(force_vector[2], 2.0));
		//direction of the force vector w.r.t robot's local frame
		angle = atan2( 	force_vector[0],
				force_vector[2]);

		//global direction of the force_vector
		angle += robot_pose[2];//theta

		main_line[0][0] = 0.0;
		main_line[0][1] = 0.0;
		main_line[0][2] = 0.0;
		main_line[1][0] = 0.0;
		main_line[1][1] = 0.0;
		main_line[1][2] = length;

		left_line[0][0] = 0.0;
		left_line[0][1] = 0.0;
		left_line[0][2] = main_line[1][2];

		left_line[1][0] = 0.03;
		left_line[1][1] = 0.0;
		left_line[1][2] = main_line[1][2]-0.03;

		right_line[0][0] = 0.0;
		right_line[0][1] = 0.0;
		right_line[0][2] = main_line[1][2];

		right_line[1][0] = -0.03;
		right_line[1][1] = 0.0;
		right_line[1][2] = main_line[1][2]-0.03;

	}
};

float* viz_data;
int size;
std::vector<float*> points;
std::vector<Arrow*> arrows;

void drawLine(){
	unsigned int size = points.size();
	if( size > 1){
		glLineWidth(2);
		glBegin(GL_LINES);
		glColor3f(0.0, 1.0, 0.0);

		for(unsigned int i=0;i<size-1;i++)
		{
			glVertex3f( points[i][0],
						points[i][1],
						points[i][2]);

			glVertex3f( points[i+1][0],
						points[i+1][1],
						points[i+1][2]);
		}
		glEnd();
	}
}

void webots_physics_init(dWorldID world, dSpaceID space, dJointGroupID contactJointGroup) {
  /*
   * Get ODE object from the .wbt model, e.g.
   *   dBodyID body1 = dWebotsGetBodyFromDEF("MY_ROBOT");
   *   dBodyID body2 = dWebotsGetBodyFromDEF("MY_SERVO");
   *   dGeomID geom2 = dWebotsGetGeomFromDEF("MY_SERVO");
   * If an object is not found in the .wbt world, the function returns NULL.
   * Your code should correcly handle the NULL cases because otherwise a segmentation fault will crash Webots.
   *
   * This function is also often used to add joints to the simulation, e.g.
   *   dJointID joint = dJointCreateBall(world, 0);
   *   dJointAttach(joint, body1, body2);
   *   ...
   */
}

void webots_physics_step() {
  /*
   * Do here what needs to be done at every time step, e.g. add forces to bodies
   *   dBodyAddForce(body1, f[0], f[1], f[2]);
   *   ...
   */
	viz_data = (float*)dWebotsReceive(&size);
	int n_floats = size/sizeof(float);
	if(viz_data)
	{
//		float* point = new float[3];
//		point[0]=viz_data[0];
//		point[1]=viz_data[1];
//		point[2]=viz_data[2];
//		points.push_back(point);
//
//		float* point2 = new float[3];
//		point2[0]=viz_data[3];
//		point2[1]=viz_data[4];
//		point2[2]=viz_data[5];
//		points.push_back(point2);

		float robot_position[3];
		float force_vector[3];
		for(int i=0;i<n_floats/2;i++){
			robot_position[i]=viz_data[i];
			force_vector[i]=viz_data[i+n_floats/2];
		}
		Arrow* arrow = new Arrow(force_vector,robot_position);
		arrows.push_back(arrow);

		float* point = new float[3];
		point[0]=robot_position[0];//x
		point[1]=robot_position[1];//y
		point[2]=robot_position[2];//z
		points.push_back(point);
	}
}

void webots_physics_draw() {

	glDisable(GL_LIGHTING);
//	glColor3f(1.0, 0.0, 0.0);
//	glPointSize(8);
//	glBegin(GL_POINTS);
//
//	for(unsigned int i=0;i<points.size();i++)
//		glVertex3f( points[i][0],points[i][1],points[i][2]);
//
//	glEnd();

//	arrows.front()->draw();
	drawLine();
	glEnable(GL_LIGHTING);

}

int webots_physics_collide(dGeomID g1, dGeomID g2) {
  return 0;
}

void cleanPoints(){
	while(points.size() > 0 )
		points.pop_back();
	points.clear();
}
void cleanArrows(){
	while(arrows.size() > 0 )
		arrows.pop_back();
	arrows.clear();
}

void webots_physics_cleanup() {
	cleanPoints();
	cleanArrows();
}
