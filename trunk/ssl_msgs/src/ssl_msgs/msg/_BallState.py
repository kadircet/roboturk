"""autogenerated by genmsg_py from BallState.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class BallState(roslib.message.Message):
  _md5sum = "8870bc00ea6f636a996e382a802ccc76"
  _type = "ssl_msgs/BallState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 confidence
float32 area
geometry_msgs/Point32 position
geometry_msgs/Point32 pix_coord

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['confidence','area','position','pix_coord']
  _slot_types = ['float32','float32','geometry_msgs/Point32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       confidence,area,position,pix_coord
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(BallState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.confidence is None:
        self.confidence = 0.
      if self.area is None:
        self.area = 0.
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Point32()
    else:
      self.confidence = 0.
      self.area = 0.
      self.position = geometry_msgs.msg.Point32()
      self.pix_coord = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.confidence, _x.area, _x.position.x, _x.position.y, _x.position.z, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.confidence, _x.area, _x.position.x, _x.position.y, _x.position.z, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.z,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.confidence, _x.area, _x.position.x, _x.position.y, _x.position.z, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.confidence, _x.area, _x.position.x, _x.position.y, _x.position.z, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.z,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8f = struct.Struct("<8f")
