"""autogenerated by genmsg_py from TeamCommand.msg. Do not edit."""
import roslib.message
import struct

import ssl_msgs.msg

class TeamCommand(roslib.message.Message):
  _md5sum = "60fb5b56deb79d428cb90d782d7690c5"
  _type = "ssl_msgs/TeamCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ssl_msgs/RobotCommand[] robot_commands

================================================================================
MSG: ssl_msgs/RobotCommand
float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame
float32 trans_direction	# in radians w.r.t local frame
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame
bool rot_direction	# ccw:+, cw:- w.r.t local frame
float32 dribbler_speed	# always positive, indicates magnitude in rpm
bool dribbler_direction	# ccw:+, cw:-
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	
bool return_battery	# true if battery level info is requested. false otherwise
bool return_temp_1	# true if temp_1 level info is requested. false otherwise
bool return_temp_2	# true if temp_2 level info is requested. false otherwise
bool return_temp_3	# true if temp_3 level info is requested. false otherwise


"""
  __slots__ = ['robot_commands']
  _slot_types = ['ssl_msgs/RobotCommand[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       robot_commands
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(TeamCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_commands is None:
        self.robot_commands = []
    else:
      self.robot_commands = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.robot_commands)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_commands:
        _x = val1
        buff.write(_struct_3fBf6B.pack(_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_commands = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.RobotCommand()
        _x = val1
        start = end
        end += 23
        (_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3,) = _struct_3fBf6B.unpack(str[start:end])
        val1.rot_direction = bool(val1.rot_direction)
        val1.dribbler_direction = bool(val1.dribbler_direction)
        val1.return_battery = bool(val1.return_battery)
        val1.return_temp_1 = bool(val1.return_temp_1)
        val1.return_temp_2 = bool(val1.return_temp_2)
        val1.return_temp_3 = bool(val1.return_temp_3)
        self.robot_commands.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.robot_commands)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_commands:
        _x = val1
        buff.write(_struct_3fBf6B.pack(_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_commands = []
      for i in xrange(0, length):
        val1 = ssl_msgs.msg.RobotCommand()
        _x = val1
        start = end
        end += 23
        (_x.trans_speed, _x.trans_direction, _x.rot_speed, _x.rot_direction, _x.dribbler_speed, _x.dribbler_direction, _x.kicker_speed, _x.return_battery, _x.return_temp_1, _x.return_temp_2, _x.return_temp_3,) = _struct_3fBf6B.unpack(str[start:end])
        val1.rot_direction = bool(val1.rot_direction)
        val1.dribbler_direction = bool(val1.dribbler_direction)
        val1.return_battery = bool(val1.return_battery)
        val1.return_temp_1 = bool(val1.return_temp_1)
        val1.return_temp_2 = bool(val1.return_temp_2)
        val1.return_temp_3 = bool(val1.return_temp_3)
        self.robot_commands.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3fBf6B = struct.Struct("<3fBf6B")
