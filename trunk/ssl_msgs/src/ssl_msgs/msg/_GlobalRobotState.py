"""autogenerated by genmsg_py from GlobalRobotState.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class GlobalRobotState(roslib.message.Message):
  _md5sum = "030e1e0e060477ba33c8d00d7d1359dd"
  _type = "ssl_msgs/GlobalRobotState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 confidence 		#confidence of the identification of the robot
uint8 id 			#robot id
uint8 team 			#robot's team 0->Blue 1->Yellow (this might be changed later on)
uint8 state 			#0->out of game/no detection, 1->in game, 2->in game but no move
geometry_msgs/Pose2D pose 	#robot's pose x,y,theta
geometry_msgs/Pose2D pix_coord 	#robot's 2D position in the image plane
float32 height 			#robot's actual height

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['confidence','id','team','state','pose','pix_coord','height']
  _slot_types = ['float32','uint8','uint8','uint8','geometry_msgs/Pose2D','geometry_msgs/Pose2D','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       confidence,id,team,state,pose,pix_coord,height
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GlobalRobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.confidence is None:
        self.confidence = 0.
      if self.id is None:
        self.id = 0
      if self.team is None:
        self.team = 0
      if self.state is None:
        self.state = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Pose2D()
      if self.height is None:
        self.height = 0.
    else:
      self.confidence = 0.
      self.id = 0
      self.team = 0
      self.state = 0
      self.pose = geometry_msgs.msg.Pose2D()
      self.pix_coord = geometry_msgs.msg.Pose2D()
      self.height = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_f3B6df.pack(_x.confidence, _x.id, _x.team, _x.state, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.theta, _x.height))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 59
      (_x.confidence, _x.id, _x.team, _x.state, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.theta, _x.height,) = _struct_f3B6df.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_f3B6df.pack(_x.confidence, _x.id, _x.team, _x.state, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.theta, _x.height))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      if self.pix_coord is None:
        self.pix_coord = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 59
      (_x.confidence, _x.id, _x.team, _x.state, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pix_coord.x, _x.pix_coord.y, _x.pix_coord.theta, _x.height,) = _struct_f3B6df.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f3B6df = struct.Struct("<f3B6df")
