/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/robocup/system_design/robocup_ssl/ssl_msgs/msg/ActuatorCommand.msg */
#ifndef SSL_MSGS_MESSAGE_ACTUATORCOMMAND_H
#define SSL_MSGS_MESSAGE_ACTUATORCOMMAND_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Pose2D.h"

namespace ssl_msgs
{
template <class ContainerAllocator>
struct ActuatorCommand_ : public ros::Message
{
  typedef ActuatorCommand_<ContainerAllocator> Type;

  ActuatorCommand_()
  : wheel_1(0.0)
  , wheel_2(0.0)
  , wheel_3(0.0)
  , wheel_4(0.0)
  , pose()
  , velocity_mag(0.0)
  , velocity_ang(0.0)
  , dribbler(0.0)
  , kicker(0.0)
  , chip_kicker(0.0)
  {
  }

  ActuatorCommand_(const ContainerAllocator& _alloc)
  : wheel_1(0.0)
  , wheel_2(0.0)
  , wheel_3(0.0)
  , wheel_4(0.0)
  , pose(_alloc)
  , velocity_mag(0.0)
  , velocity_ang(0.0)
  , dribbler(0.0)
  , kicker(0.0)
  , chip_kicker(0.0)
  {
  }

  typedef float _wheel_1_type;
  float wheel_1;

  typedef float _wheel_2_type;
  float wheel_2;

  typedef float _wheel_3_type;
  float wheel_3;

  typedef float _wheel_4_type;
  float wheel_4;

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;

  typedef float _velocity_mag_type;
  float velocity_mag;

  typedef float _velocity_ang_type;
  float velocity_ang;

  typedef float _dribbler_type;
  float dribbler;

  typedef float _kicker_type;
  float kicker;

  typedef float _chip_kicker_type;
  float chip_kicker;


private:
  static const char* __s_getDataType_() { return "ssl_msgs/ActuatorCommand"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "df4087748bcf3e3c6af91932c8b968e6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 wheel_1\n\
float32 wheel_2\n\
float32 wheel_3\n\
float32 wheel_4\n\
geometry_msgs/Pose2D pose#temporary\n\
float32 velocity_mag #temporary\n\
float32 velocity_ang #temporary (w.r.t robot!)\n\
float32 dribbler\n\
float32 kicker\n\
float32 chip_kicker\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, wheel_1);
    ros::serialization::serialize(stream, wheel_2);
    ros::serialization::serialize(stream, wheel_3);
    ros::serialization::serialize(stream, wheel_4);
    ros::serialization::serialize(stream, pose);
    ros::serialization::serialize(stream, velocity_mag);
    ros::serialization::serialize(stream, velocity_ang);
    ros::serialization::serialize(stream, dribbler);
    ros::serialization::serialize(stream, kicker);
    ros::serialization::serialize(stream, chip_kicker);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, wheel_1);
    ros::serialization::deserialize(stream, wheel_2);
    ros::serialization::deserialize(stream, wheel_3);
    ros::serialization::deserialize(stream, wheel_4);
    ros::serialization::deserialize(stream, pose);
    ros::serialization::deserialize(stream, velocity_mag);
    ros::serialization::deserialize(stream, velocity_ang);
    ros::serialization::deserialize(stream, dribbler);
    ros::serialization::deserialize(stream, kicker);
    ros::serialization::deserialize(stream, chip_kicker);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(wheel_1);
    size += ros::serialization::serializationLength(wheel_2);
    size += ros::serialization::serializationLength(wheel_3);
    size += ros::serialization::serializationLength(wheel_4);
    size += ros::serialization::serializationLength(pose);
    size += ros::serialization::serializationLength(velocity_mag);
    size += ros::serialization::serializationLength(velocity_ang);
    size += ros::serialization::serializationLength(dribbler);
    size += ros::serialization::serializationLength(kicker);
    size += ros::serialization::serializationLength(chip_kicker);
    return size;
  }

  typedef boost::shared_ptr< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::ActuatorCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct ActuatorCommand
typedef  ::ssl_msgs::ActuatorCommand_<std::allocator<void> > ActuatorCommand;

typedef boost::shared_ptr< ::ssl_msgs::ActuatorCommand> ActuatorCommandPtr;
typedef boost::shared_ptr< ::ssl_msgs::ActuatorCommand const> ActuatorCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssl_msgs::ActuatorCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df4087748bcf3e3c6af91932c8b968e6";
  }

  static const char* value(const  ::ssl_msgs::ActuatorCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf4087748bcf3e3cULL;
  static const uint64_t static_value2 = 0x6af91932c8b968e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/ActuatorCommand";
  }

  static const char* value(const  ::ssl_msgs::ActuatorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 wheel_1\n\
float32 wheel_2\n\
float32 wheel_3\n\
float32 wheel_4\n\
geometry_msgs/Pose2D pose#temporary\n\
float32 velocity_mag #temporary\n\
float32 velocity_ang #temporary (w.r.t robot!)\n\
float32 dribbler\n\
float32 kicker\n\
float32 chip_kicker\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::ssl_msgs::ActuatorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.wheel_1);
    stream.next(m.wheel_2);
    stream.next(m.wheel_3);
    stream.next(m.wheel_4);
    stream.next(m.pose);
    stream.next(m.velocity_mag);
    stream.next(m.velocity_ang);
    stream.next(m.dribbler);
    stream.next(m.kicker);
    stream.next(m.chip_kicker);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ActuatorCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::ActuatorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssl_msgs::ActuatorCommand_<ContainerAllocator> & v) 
  {
    s << indent << "wheel_1: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_1);
    s << indent << "wheel_2: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_2);
    s << indent << "wheel_3: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_3);
    s << indent << "wheel_4: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_4);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity_mag: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_mag);
    s << indent << "velocity_ang: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_ang);
    s << indent << "dribbler: ";
    Printer<float>::stream(s, indent + "  ", v.dribbler);
    s << indent << "kicker: ";
    Printer<float>::stream(s, indent + "  ", v.kicker);
    s << indent << "chip_kicker: ";
    Printer<float>::stream(s, indent + "  ", v.chip_kicker);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_ACTUATORCOMMAND_H

