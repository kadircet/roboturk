/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/robocup/system_design/robocup_ssl/ssl_msgs/msg/GameState.msg */
#ifndef SSL_MSGS_MESSAGE_GAMESTATE_H
#define SSL_MSGS_MESSAGE_GAMESTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace ssl_msgs
{
template <class ContainerAllocator>
struct GameState_ : public ros::Message
{
  typedef GameState_<ContainerAllocator> Type;

  GameState_()
  : temp1(0.0)
  , temp2(0.0)
  , temp3(0.0)
  {
  }

  GameState_(const ContainerAllocator& _alloc)
  : temp1(0.0)
  , temp2(0.0)
  , temp3(0.0)
  {
  }

  typedef float _temp1_type;
  float temp1;

  typedef float _temp2_type;
  float temp2;

  typedef float _temp3_type;
  float temp3;


private:
  static const char* __s_getDataType_() { return "ssl_msgs/GameState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fa5a84b1c8bb12b4999d77912044d8dd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 temp1 		#dummy\n\
float32 temp2 		#dummy\n\
float32 temp3 		#dummy\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, temp1);
    ros::serialization::serialize(stream, temp2);
    ros::serialization::serialize(stream, temp3);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, temp1);
    ros::serialization::deserialize(stream, temp2);
    ros::serialization::deserialize(stream, temp3);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(temp1);
    size += ros::serialization::serializationLength(temp2);
    size += ros::serialization::serializationLength(temp3);
    return size;
  }

  typedef boost::shared_ptr< ::ssl_msgs::GameState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::GameState_<ContainerAllocator>  const> ConstPtr;
}; // struct GameState
typedef  ::ssl_msgs::GameState_<std::allocator<void> > GameState;

typedef boost::shared_ptr< ::ssl_msgs::GameState> GameStatePtr;
typedef boost::shared_ptr< ::ssl_msgs::GameState const> GameStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssl_msgs::GameState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssl_msgs::GameState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::GameState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa5a84b1c8bb12b4999d77912044d8dd";
  }

  static const char* value(const  ::ssl_msgs::GameState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfa5a84b1c8bb12b4ULL;
  static const uint64_t static_value2 = 0x999d77912044d8ddULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::GameState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/GameState";
  }

  static const char* value(const  ::ssl_msgs::GameState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::GameState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 temp1 		#dummy\n\
float32 temp2 		#dummy\n\
float32 temp3 		#dummy\n\
\n\
";
  }

  static const char* value(const  ::ssl_msgs::GameState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssl_msgs::GameState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssl_msgs::GameState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.temp1);
    stream.next(m.temp2);
    stream.next(m.temp3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GameState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::GameState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssl_msgs::GameState_<ContainerAllocator> & v) 
  {
    s << indent << "temp1: ";
    Printer<float>::stream(s, indent + "  ", v.temp1);
    s << indent << "temp2: ";
    Printer<float>::stream(s, indent + "  ", v.temp2);
    s << indent << "temp3: ";
    Printer<float>::stream(s, indent + "  ", v.temp3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_GAMESTATE_H

