/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/robocup/system_design/robocup_ssl/ssl_msgs/msg/TeamCommand.msg */
#ifndef SSL_MSGS_MESSAGE_TEAMCOMMAND_H
#define SSL_MSGS_MESSAGE_TEAMCOMMAND_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ssl_msgs/RobotCommand.h"

namespace ssl_msgs
{
template <class ContainerAllocator>
struct TeamCommand_ : public ros::Message
{
  typedef TeamCommand_<ContainerAllocator> Type;

  TeamCommand_()
  : robot_commands()
  {
  }

  TeamCommand_(const ContainerAllocator& _alloc)
  : robot_commands(_alloc)
  {
  }

  typedef std::vector< ::ssl_msgs::RobotCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::other >  _robot_commands_type;
  std::vector< ::ssl_msgs::RobotCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::other >  robot_commands;


  ROS_DEPRECATED uint32_t get_robot_commands_size() const { return (uint32_t)robot_commands.size(); }
  ROS_DEPRECATED void set_robot_commands_size(uint32_t size) { robot_commands.resize((size_t)size); }
  ROS_DEPRECATED void get_robot_commands_vec(std::vector< ::ssl_msgs::RobotCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::other > & vec) const { vec = this->robot_commands; }
  ROS_DEPRECATED void set_robot_commands_vec(const std::vector< ::ssl_msgs::RobotCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::other > & vec) { this->robot_commands = vec; }
private:
  static const char* __s_getDataType_() { return "ssl_msgs/TeamCommand"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "60fb5b56deb79d428cb90d782d7690c5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "ssl_msgs/RobotCommand[] robot_commands\n\
\n\
================================================================================\n\
MSG: ssl_msgs/RobotCommand\n\
float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame\n\
float32 trans_direction	# in radians w.r.t local frame\n\
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame\n\
bool rot_direction	# ccw:+, cw:- w.r.t local frame\n\
float32 dribbler_speed	# always positive, indicates magnitude in rpm\n\
bool dribbler_direction	# ccw:+, cw:-\n\
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	\n\
bool return_battery	# true if battery level info is requested. false otherwise\n\
bool return_temp_1	# true if temp_1 level info is requested. false otherwise\n\
bool return_temp_2	# true if temp_2 level info is requested. false otherwise\n\
bool return_temp_3	# true if temp_3 level info is requested. false otherwise\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, robot_commands);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, robot_commands);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(robot_commands);
    return size;
  }

  typedef boost::shared_ptr< ::ssl_msgs::TeamCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::TeamCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct TeamCommand
typedef  ::ssl_msgs::TeamCommand_<std::allocator<void> > TeamCommand;

typedef boost::shared_ptr< ::ssl_msgs::TeamCommand> TeamCommandPtr;
typedef boost::shared_ptr< ::ssl_msgs::TeamCommand const> TeamCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssl_msgs::TeamCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssl_msgs::TeamCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::TeamCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "60fb5b56deb79d428cb90d782d7690c5";
  }

  static const char* value(const  ::ssl_msgs::TeamCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x60fb5b56deb79d42ULL;
  static const uint64_t static_value2 = 0x8cb90d782d7690c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::TeamCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/TeamCommand";
  }

  static const char* value(const  ::ssl_msgs::TeamCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::TeamCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssl_msgs/RobotCommand[] robot_commands\n\
\n\
================================================================================\n\
MSG: ssl_msgs/RobotCommand\n\
float32 trans_speed	# always positive, indicates magnitude in m/s w.r.t local frame\n\
float32 trans_direction	# in radians w.r.t local frame\n\
float32 rot_speed	# always positive, indicates magnitude in radians w.r.t local frame\n\
bool rot_direction	# ccw:+, cw:- w.r.t local frame\n\
float32 dribbler_speed	# always positive, indicates magnitude in rpm\n\
bool dribbler_direction	# ccw:+, cw:-\n\
uint8 kicker_speed	# always positive, indicates magnitude between [0,100]	\n\
bool return_battery	# true if battery level info is requested. false otherwise\n\
bool return_temp_1	# true if temp_1 level info is requested. false otherwise\n\
bool return_temp_2	# true if temp_2 level info is requested. false otherwise\n\
bool return_temp_3	# true if temp_3 level info is requested. false otherwise\n\
\n\
\n\
";
  }

  static const char* value(const  ::ssl_msgs::TeamCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssl_msgs::TeamCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_commands);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TeamCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::TeamCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssl_msgs::TeamCommand_<ContainerAllocator> & v) 
  {
    s << indent << "robot_commands[]" << std::endl;
    for (size_t i = 0; i < v.robot_commands.size(); ++i)
    {
      s << indent << "  robot_commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ssl_msgs::RobotCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_commands[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_TEAMCOMMAND_H

