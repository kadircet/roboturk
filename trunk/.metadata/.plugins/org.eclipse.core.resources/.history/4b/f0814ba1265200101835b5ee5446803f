/*
 * SSLSimRobot.cpp
 *
 *  Created on: Mar 16, 2011
 *      Author: kadir
 */

#include "SSLSimRobot.h"

int SSLSimRobot::sign(float data){
        if(data >= 0)
                return 1;
        else
                return -1;
}

void SSLSimRobot::setMotorVelocities(){
  motors[0]->setPosition(sign(packet[0])*MAXINT);
  motors[1]->setPosition(sign(packet[1])*MAXINT);
  motors[2]->setPosition(sign(packet[2])*MAXINT);
  motors[3]->setPosition(sign(packet[3])*MAXINT);

  motors[0]->setVelocity(abs(packet[0]));
  motors[1]->setVelocity(abs(packet[1]));
  motors[2]->setVelocity(abs(packet[2]));
  motors[3]->setVelocity(abs(packet[3]));
}

void SSLSimRobot::Receive(){
  if(receiver->getQueueLength() > 0){
    float* tmp = (float*)receiver->getData();
    for(int i=0;i<4;i++)
      packet[i]=tmp[i];

    for(int i=0;i<4;i++)
      std::cout
        <<"w1:"<<packet[0]
        <<" w2:"<<packet[1]
        <<" w3:"<<packet[2]
        <<" w4:"<<packet[3]<<std::endl;

    receiver->nextPacket();
  }
}

SSLSimRobot::SSLSimRobot()
{
  packet = new float[40];
  receiver = getReceiver("receiver");
  receiver->enable(TIME_STEP/2);

  motors.push_back(getServo("wheel1"));
  motors.push_back(getServo("wheel2"));
  motors.push_back(getServo("wheel3"));
  motors.push_back(getServo("wheel4"));
  for(unsigned int i=0;i<motors.size();i++)
    motors[i]->enablePosition(TIME_STEP);
}

SSLSimRobot::~SSLSimRobot()
{
  // TODO Auto-generated destructor stub
}

void SSLSimRobot::Spin(){
  while(true){
//    Receive();
//    setMotorVelocities();
    if (step(TIME_STEP) == -1) break;
  }
}
